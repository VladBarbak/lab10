"""
Реалізувати програмно мовою Python завдання з наведеного нижче списку. Для кожної з задач алгоритм реалізувати з
використанням рекурсії і ітерації. Аргументувати письмово доцільність вибору в кожному випадку рекурсії або ітерації
(використовувати в якості критеріїв - час розробки та виконання програм, обсяг займаної пам'яті, читабельність програми)
2. Сформувати функцію для обчислення цифрового кореню натурального числа. Цифровий корінь отримується наступним чином:
необхідно скласти всі цифри заданого числа, потім скласти всі цифри знайденої суми і повторювати процес до тих пір,
поки сума не буде дорівнювати однозначному числу, що і буде цифровим коренем заданого числа.
Барбак Владислав 122-В
"""
while True:
    from time import time  # Імпорутуємо time для підрахунку часу
    def iter_sqrt(n):  # Створення ітераційної функції
        while n > 9:
            i = int(n % 10)
            n = n // 10
            n = n + i
        return n
    def rec_sqrt(n):  # Створення рекурсивної функції
        if n > 9:
            return rec_sqrt(n // 10 + n % 10)
        return n
    n = int((input("N = ")))
    t_1 = time()
    print("Виконання рекурсією: \n", rec_sqrt(n))
    ti_1 = time()
    rec_time = ti_1 - t_1
    t_2 = time()
    print("Виконання ітерацією: \n", iter_sqrt(n))
    ti_2 = time()
    iter_time = ti_2 - t_2
    print()
    print(f"Час виконання:\n Ітерація = {iter_time}\n Рекурсія = {rec_time}")
    result = input("Хочите продовжити? Якщо да - 1, Якщо ні - інше: ")  # Зациклюємо програму
    if result == '1':
        continue
    else:
        break
# Обидва методи зваймають майже однаково коду.
# Ітерація виконується швидше.
# Рекурсія забирає більше пам'яті через зберігання значень у стеку.
# Обидва методи читабельні, але рекурсивний більш зрозуміліший
